AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: CAST Email-sending application

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 120
    MemorySize: 128

Parameters:
  BucketInput:
    Type: String
    Description: input bucket for lambda
    NoEcho: true

  BucketInputOverview:
    Type: String
    Description: input bucket for overview file
    NoEcho: true

  VPCId:
    Type: String
    Description: Subnet id
    NoEcho: true

  Subnet1:
    Type: String
    Description: Subnet id
    NoEcho: true

  Subnet2:
    Type: String
    Description: Subnet id
    NoEcho: true

  Prefix:
    Description: project prefix
    Type: String
    Default: CAST-

  PrefixLowercase:
    Description: project prefix
    Type: String
    Default: cast-

  Env:
    Description: stage
    Type: String

  ApiRole:
    Type: String
    Description: api role for updater function

  ProxyId:
    Type: String
    Description: default proxy id

Conditions:
  ProdResources: !Equals [!Ref Env, prod]

Resources:
  CostReportFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 240
      MemorySize: 400
      FunctionName: !Sub ${Prefix}CRS-Sender
      Description: CRS -- Distributes Cost Reports according to Sending list from CRC
      Role: !GetAtt SESRole.Arn
      CodeUri: CostReportFunction/
      Handler: app.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Layers:
        - !Ref SharedLayer
      Environment:
        Variables:
          BUCKET_INPUT: !Ref BucketInput
          BUCKET_INPUT_OVERVIEW: !Ref BucketInputOverview

  SendingSummaryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 240
      MemorySize: 400
      FunctionName: !Sub ${Prefix}SR-Sender
      Description: SR -- Distributes Summary Reports according to Sending list from CRC
      Role: !GetAtt SESRole.Arn
      CodeUri: SummaryReportFunction/
      Handler: app.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Layers:
        - !Ref SharedLayer
      Environment:
        Variables:
          BUCKET_INPUT: !Ref BucketInput
          BUCKET_INPUT_OVERVIEW: !Ref BucketInputOverview

  MissingFieldsReportFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 240
      FunctionName: !Sub ${Prefix}MFR-Sender
      Description: MFR -- Distributes Missing Field Reports according to Sending list from CRC
      Role: !GetAtt SESRole.Arn
      CodeUri: MissingFieldsReportFunction/
      Handler: app.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Layers:
        - !Ref SharedLayer
      Environment:
        Variables:
          BUCKET_INPUT: !Ref BucketInput
          BUCKET_INPUT_OVERVIEW: !Ref BucketInputOverview

  UpdatingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Prefix}CDB-Updater
      Description: CRS -- Finds the missing data
      Role:
        !If [
          ProdResources,
          arn:aws:iam::936022423514:role/CAST-billing,
          arn:aws:iam::471685057907:role/vw-lambda-reporting-CostReportingFunctionRole-AXA0WJOBOLIW,
        ]
      CodeUri: UpdaterFunction/
      Handler: app.lambda_handler
      Runtime: python3.11
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt CASTLambdasSG.GroupId
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2
      Environment:
        Variables:
          API_ROLE: !Ref ApiRole
          BUCKET_INPUT_OVERVIEW: !Ref BucketInputOverview
          ProxyId: !Ref ProxyId
          BUCKET_INPUT: !Ref BucketInput

  CASTLambdasSG:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref VPCId
      GroupDescription: DPP-CAST security group for Lambda actions
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: allows Lambda connections to other services

  InvokingRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"

  InvokingPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CASTTriggerPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - lambda:invokeFunction
            Resource:
              - !GetAtt CostReportFunction.Arn

          - Effect: Allow
            Action:
              - lambda:listFunctions
            Resource:
              - "*"
      Roles:
        - Ref: InvokingRole

  SESRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"

  SESPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CASTSendPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource:
              - "*"
            Condition:
              ForAnyValue:StringEquals:
                ses:FromAddress:
                  [
                    "dpp.clearing.office.vwag.r.wob@volkswagen.de",
                    "cast.ses.2@efs.at",
                    "cast.ses.1@efs.at",
                    "extern.gregor.zopf@volkswagen.de",
                  ]
      Roles:
        - Ref: SESRole

  S3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: SesS3
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:PutObject
              - s3:GetObject
              - s3:PutObjectTagging
              - s3:GetBucketLocation
            Resource:
              - !Sub arn:aws:s3:::${PrefixLowercase}*
              - !Sub arn:aws:s3:::${PrefixLowercase}*/*
              - !Sub arn:aws:s3:::${Prefix}*
              - !Sub arn:aws:s3:::${Prefix}*/*
              - !Sub arn:aws:s3:::vw-lambda-*
              - !Sub arn:aws:s3:::vw-lambda-*/*
      Roles:
        - Ref: SESRole

  SharedLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: SharedLayer
      Description: Some code to share with the other lambda functions
      ContentUri: ./shared
      CompatibleRuntimes:
        - python3.11

      RetentionPolicy: Delete

  ScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: "TriggerMissingValuesCheck"
      Description: "Scheduled Rule To Invoke Lambda Function"
      ScheduleExpression: cron(0 12 ? * 2 *) # "rate(10 minutes)"
      State: "ENABLED"
      Targets: 
        - 
          Arn: "arn:aws:lambda:eu-west-1:471685057907:function:CAST-CDB-Updater"
          Id: "TargetFunctionCDBUpdater"
          Input: |- 
            {
              "send_email": "False"
            }

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: "CAST-CDB-Updater"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ScheduledRule"
          - "Arn"
